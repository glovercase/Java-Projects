#BlueJ class context
comment0.params=
comment0.target=Genealogy()
comment0.text=\n\ Construct\ a\ new\ Genealogy\ object\n\ and\ set\ up\ the\ GUI\n
comment1.params=action
comment1.target=void\ buttonPerformed(java.lang.String)
comment1.text=\n\ Respond\ to\ button\ presses\n
comment10.params=
comment10.target=void\ grandChildren()
comment10.text=\ Completion\:\n\ Prints\ (to\ textArea)\ names\ of\ all\ grandchildren\ (if\ any)\ \n\ of\ the\ currently\ specified\ person\n
comment11.params=people\ singlular\ plural
comment11.target=void\ printPersonList(java.util.ArrayList,\ java.lang.String,\ java.lang.String)
comment12.params=p
comment12.target=java.util.ArrayList\ getGrandChildren(Person)
comment13.params=p\ prefix
comment13.target=void\ printAncestors(Person,\ java.lang.String)
comment14.params=p\ prefix
comment14.target=void\ printDesendants(Person,\ java.lang.String)
comment15.params=p
comment15.target=void\ printPartners(Person)
comment16.params=arguments
comment16.target=void\ main(java.lang.String[])
comment2.params=field\ value
comment2.target=void\ textFieldPerformed(java.lang.String,\ java.lang.String)
comment2.text=\n\ Respond\ to\ text\ field\:\ select\ the\ person\ with\ the\ given\ name\n
comment3.params=filename
comment3.target=void\ loadDatabase(java.lang.String)
comment3.text=\n\ Reads\ the\ data\ from\ the\ database\ file\ into\ the\ ArrayList\ in\ the\ db\ field\n\ Ensures\ that\ the\ list\ in\ db\ is\ empty\n\ Reads\ the\ data\ on\ each\ line\ and\ constructs\ a\ Person\ object,\n\ \ and\ puts\ the\ Person\ object\ into\ the\ list\n\ \ \ (Should\ use\ the\ second\ or\ third\ Person\ constructor,\ either\n\ \ \ \ passing\ to\ the\ constructor\ a\ line\ from\ the\ file,\ or\ the\ scanner\ itself)\n\ The\ method\ may\ assume\ that\ the\ database\ is\ correctly\ formatted,\n\ \ and\ does\ not\ need\ to\ do\ any\ checking\ of\ the\ input.\n
comment4.params=
comment4.target=void\ printAllNames()
comment4.text=\n\ Print\ out\ names\ of\ all\ the\ people\ in\ the\ database\n
comment5.params=name
comment5.target=Person\ getPerson(java.lang.String)
comment5.text=\n\ Looks\ for,\ and\ returns,\ a\ Person\ with\ the\ given\ name\ in\ the\ database.\n\ Returns\ null\ if\ not\ found\n
comment6.params=
comment6.target=void\ printPerson()
comment6.text=\n\ Prints\ the\ name,\ gender,\ and\ year\ of\ birth\ of\ the\ currently\ selected\ person.\n\ If\ no\ current\ person,\ prints\ a\ message.\n\ \ [Note,\ the\ toString()\ method\ of\ the\ Person\ class\ returns\ a\ string\n\ containing\ the\ name,\ gender,\ and\ year\ of\ birth\ of\ the\ person.]\n
comment7.params=
comment7.target=void\ printParents()
comment7.text=\n\ Prints\ the\ name,\ gender,\ and\ year\ of\ birth\ of\ the\ mother\ and\ the\ father\ of\ the\n\ \ currently\ selected\ person,\ if\ they\ are\ known.\n\ Prints\ appropriate\ messages\ if\ they\ are\ unknown.\n\ (Must\ find\ the\ Person\ objects\ in\ the\ database)\n
comment8.params=
comment8.target=void\ printChildren()
comment8.text=\n\ Prints\ the\ number\ of\ children\ of\ the\ given\ person,\n\ followed\ by\ the\ names,\ genders,\ and\ years\ of\ birth\ of\ all\ the\ children.\n\ Searches\ the\ database\ for\ Persons\ who\ have\ the\ currently\ specified\ person\n\ as\ one\ of\ their\ parents.\ Any\ such\ person\ is\ added\ to\ a\ list\n\ It\ then\ prints\ out\ the\ information\ from\ the\ list\ of\ children.\n
comment9.params=p
comment9.target=java.util.ArrayList\ getChildren(Person)
comment9.text=\n\ Returns\ a\ list\ of\ the\ children\ of\ a\ person.\n
numComments=17

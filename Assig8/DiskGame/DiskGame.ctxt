#BlueJ class context
comment0.params=
comment0.target=DiskGame()
comment0.text=\n\ Constructor\:\n\ Set\ up\ the\ buttons\ and\ the\ keylistener\n\ Start\ the\ game\n
comment1.params=button
comment1.target=void\ buttonPerformed(java.lang.String)
comment1.text=\n\ Respond\ to\ the\ buttons\n
comment10.params=
comment10.target=boolean\ allDisksExploded()
comment10.text=\n\ Are\ all\ the\ disks\ exploded?\n\ Useful\ for\ telling\ whether\ the\ game\ is\ over.\n
comment11.params=
comment11.target=void\ updateScore()
comment11.text=\n\ Update\ the\ score\ field,\ by\ summing\ the\ scores\ of\ each\ disk\n\ Score\ is\ 150\ for\ exploded\ disks,\ 50\ for\ disks\ with\ 2\ hits,\ and\ 20\ for\ disks\ with\ 1\ hit.\n
comment12.params=
comment12.target=void\ redraw()
comment12.text=\n\ \ Redraws\ the\ game\:\n\ \ -\ Redraws\ the\ disks\n\ \ -\ Redraws\ the\ gun\n\ \ -\ Redraws\ the\ pile\ of\ remaining\ shot\ (Completion)\n\ \ -\ Displays\ the\ current\ score\ (Completion)\n\ \ -\ calls\ repaintGraphics\ to\ make\ them\ visible\n\ \n
comment13.params=args
comment13.target=void\ main(java.lang.String[])
comment2.params=key
comment2.target=void\ keyPerformed(java.lang.String)
comment2.text=\n\ Respond\ to\ the\ key\ presses.\n\ Left\ and\ Right\ arrows\ change\ the\ gun\ position;\n\ Space\ fires\ a\ shot\n
comment3.params=
comment3.target=void\ startGame()
comment3.text=\n\ Set\ the\ fields\ of\ the\ game\ to\ their\ initial\ values,\n\ Create\ a\ new\ set\ of\ disks\n\ redraw\ the\ game\n
comment4.params=
comment4.target=void\ initialiseDisks()
comment4.text=\n\ Make\ a\ new\ array\ of\ disks\ with\ new\ disks\ at\ random\ positions\n\ within\ the\ shooting\ range.\n\ Completion\:\ ensure\ than\ none\ of\ them\ are\ overlapping.\n
comment5.params=index
comment5.target=boolean\ checkOverLap(int)
comment6.params=
comment6.target=void\ fireShot()
comment6.text=\n\ The\ core\ mechanic\ of\ the\ game\ is\ to\ fire\ a\ shot.\n\ -\ Check\ that\ there\ is\ a\ shot\ remaining.\n\ -\ Move\ the\ shot\ up\ the\ screen\ from\ the\ gun,\ step\ by\ step,\ until\ \n\ \ \ it\ either\ goes\ off\ the\ screen\ or\ hits\ a\ disk.\n\ \ \ The\ shot\ is\ constantly\ redrawn\ as\ a\ line\ from\ the\ gun\ to\ its\ current\ position.\n\ -\ If\ the\ shot\ hits\ a\ disk,\ it\ damages\ the\ disk,\ \n\ -\ If\ the\ disk\ is\ now\ broken,\ then\ it\ will\ damage\ its\ neighbours\n\ \ (ie,\ all\ the\ other\ disks\ within\ range\ will\ be\ damaged\ also)\n\ -\ If\ it\ hit\ a\ disk,\ exit\ the\ loop.\n\ -\ Finally,\ update\ the\ score,\n\ -\ If\ the\ game\ is\ now\ over,\ \ print\ out\ the\ score\ \n\ (You\ should\ define\ additional\ methods\ -\ don't\ do\ it\ all\ in\ one\ big\ method\!)\n
comment7.params=d
comment7.target=void\ diskHit(Disk)
comment8.params=d
comment8.target=void\ diskWithinRange(Disk)
comment9.params=
comment9.target=void\ gun()
numComments=14
